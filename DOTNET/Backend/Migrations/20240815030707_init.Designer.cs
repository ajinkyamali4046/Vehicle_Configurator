// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using v_conf_dn.Repository;

#nullable disable

namespace vconfdn.Migrations
{
    [DbContext(typeof(VehicleDBContext))]
    [Migration("20240815030707_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("v_conf_dn.Models.AlternateComponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AltCompId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("CompId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<double?>("DeltaPrice")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<long?>("ModId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AltCompId");

                    b.HasIndex("CompId");

                    b.HasIndex("ModId");

                    b.ToTable("AlternateComponents");
                });

            modelBuilder.Entity("v_conf_dn.Models.Component", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CompName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("comp_name");

                    b.HasKey("Id");

                    b.ToTable("components", (string)null);
                });

            modelBuilder.Entity("v_conf_dn.Models.Invoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ModelId")
                        .HasColumnType("bigint")
                        .HasColumnName("model_id");

                    b.Property<int?>("ModelPrice")
                        .HasColumnType("int")
                        .HasColumnName("model_price");

                    b.Property<int?>("OrderedQty")
                        .HasColumnType("int")
                        .HasColumnName("ordered_qty");

                    b.Property<int?>("TotalPrice")
                        .HasColumnType("int")
                        .HasColumnName("total_price");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("invoices", (string)null);
                });

            modelBuilder.Entity("v_conf_dn.Models.Manufacturer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ManuName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("manu_name");

                    b.Property<long?>("SegId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SegId");

                    b.ToTable("manufacturers", (string)null);
                });

            modelBuilder.Entity("v_conf_dn.Models.Model", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_path");

                    b.Property<long?>("ManuId")
                        .HasColumnType("bigint");

                    b.Property<int?>("MinQty")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("min_qty");

                    b.Property<string>("ModName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("mod_name");

                    b.Property<int?>("Price")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<int?>("SafetyRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5)
                        .HasColumnName("safety_rating");

                    b.Property<long?>("SegId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ManuId");

                    b.HasIndex("SegId");

                    b.ToTable("models", (string)null);
                });

            modelBuilder.Entity("v_conf_dn.Models.Segment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("SegName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("seg_name")
                        .HasAnnotation("Relational:JsonPropertyName", "segName");

                    b.HasKey("Id");

                    b.ToTable("segments", (string)null);
                });

            modelBuilder.Entity("v_conf_dn.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address_line1");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address_line2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("city");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("company_name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("GstNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("gst_number");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pin_code");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("state");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("telephone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("v_conf_dn.Models.Vehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CompType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comp_type");

                    b.Property<long?>("ComponentId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("IsConfigurable")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("is_configurable");

                    b.Property<long?>("ModelId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ModelId");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("v_conf_dn.Models.AlternateComponent", b =>
                {
                    b.HasOne("v_conf_dn.Models.Component", "AltComp")
                        .WithMany()
                        .HasForeignKey("AltCompId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("v_conf_dn.Models.Component", "Component")
                        .WithMany()
                        .HasForeignKey("CompId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("v_conf_dn.Models.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AltComp");

                    b.Navigation("Component");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("v_conf_dn.Models.Manufacturer", b =>
                {
                    b.HasOne("v_conf_dn.Models.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("v_conf_dn.Models.Model", b =>
                {
                    b.HasOne("v_conf_dn.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("v_conf_dn.Models.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Manufacturer");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("v_conf_dn.Models.Vehicle", b =>
                {
                    b.HasOne("v_conf_dn.Models.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("v_conf_dn.Models.Model", "Mod")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Mod");
                });
#pragma warning restore 612, 618
        }
    }
}
